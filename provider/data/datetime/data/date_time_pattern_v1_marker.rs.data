// @generated
/// Implement `DataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_date_time_pattern_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DATE_TIME_PATTERN_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale, icu::datetime::provider::neo::DateTimePatternV1Marker> = {
                type S = <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const _F_AF: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } };
                const _F_AR: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } };
                const _F_AST: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } };
                const _F_EL: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } };
                const _F_EU: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } };
                const _F_FA: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } };
                const _F_VI: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } };
                const _F_XNR: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } };
                const _L_NN: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } };
                const _M_FA: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } };
                icu_provider_baked::binary_search::Data(&[(("f", "af"), _F_AF), (("f", "am"), _F_AF), (("f", "ar"), _F_AR), (("f", "as"), _F_AF), (("f", "ast"), _F_AST), (("f", "az"), _F_AF), (("f", "be"), _F_AST), (("f", "bg"), _F_AST), (("f", "bgc"), _F_AF), (("f", "bho"), _F_AF), (("f", "blo"), _F_AST), (("f", "bn"), _F_AF), (("f", "br"), _F_AST), (("f", "brx"), _F_AST), (("f", "bs"), _F_AST), (("f", "bs-Cyrl"), _F_AF), (("f", "ca"), _F_AST), (("f", "ceb"), _F_AST), (("f", "chr"), _F_AST), (("f", "cs"), _F_AF), (("f", "csw"), _F_AF), (("f", "cv"), _F_AST), (("f", "cy"), _F_AST), (("f", "da"), _F_AF), (("f", "de"), _F_AST), (("f", "doi"), _F_AST), (("f", "dsb"), _F_AF), (("f", "el"), _F_EL), (("f", "en"), _F_AST), (("f", "en-MV"), _F_AF), (("f", "eo"), _F_AF), (("f", "es"), _F_AST), (("f", "et"), _F_AF), (("f", "eu"), _F_EU), (("f", "fa"), _F_FA), (("f", "ff-Adlm"), _F_AF), (("f", "fi"), _F_AF), (("f", "fil"), _F_AST), (("f", "fo"), _F_AST), (("f", "fr"), _F_AST), (("f", "fy"), _F_AF), (("f", "ga"), _F_AF), (("f", "gd"), _F_AF), (("f", "gl"), _F_AST), (("f", "gu"), _F_AF), (("f", "ha"), _F_AF), (("f", "he"), _F_AST), (("f", "hi"), _F_AST), (("f", "hr"), _F_AF), (("f", "hsb"), _F_AF), (("f", "hu"), _F_AF), (("f", "hy"), _F_AST), (("f", "ia"), _F_AF), (("f", "id"), _F_AF), (("f", "ie"), _F_AF), (("f", "ig"), _F_AST), (("f", "is"), _F_AST), (("f", "it"), _F_AF), (("f", "ja"), _F_AF), (("f", "jv"), _F_AF), (("f", "ka"), _F_AST), (("f", "kea"), _F_AST), (("f", "kgp"), _F_AF), (("f", "kk"), _F_AST), (("f", "km"), _F_AST), (("f", "kn"), _F_AF), (("f", "ko"), _F_AF), (("f", "kok"), _F_AF), (("f", "ks"), _F_AST), (("f", "ks-Deva"), _F_AST), (("f", "ku"), _F_AF), (("f", "kxv"), _F_AST), (("f", "kxv-Deva"), _F_AF), (("f", "kxv-Orya"), _F_AF), (("f", "kxv-Telu"), _F_AF), (("f", "ky"), _F_AF), (("f", "lb"), _F_AF), (("f", "lij"), _F_AF), (("f", "lmo"), _F_AF), (("f", "lo"), _F_AST), (("f", "lt"), _F_AF), (("f", "lv"), _F_AF), (("f", "mai"), _F_AST), (("f", "mi"), _F_AF), (("f", "mk"), _F_AST), (("f", "ml"), _F_AF), (("f", "mn"), _F_AF), (("f", "mni"), _F_AST), (("f", "mr"), _F_AST), (("f", "ms"), _F_AF), (("f", "mt"), _F_AF), (("f", "my"), _F_AF), (("f", "nds"), _F_AF), (("f", "ne"), _F_AF), (("f", "nl"), _F_AST), (("f", "nn"), _F_AF), (("f", "no"), _F_AST), (("f", "nqo"), _F_AF), (("f", "oc"), _F_AF), (("f", "or"), _F_AST), (("f", "pa"), _F_AF), (("f", "pcm"), _F_AST), (("f", "pl"), _F_AF), (("f", "prg"), _F_AF), (("f", "ps"), _F_AF), (("f", "pt"), _F_AF), (("f", "pt-PT"), _F_AST), (("f", "qu"), _F_AF), (("f", "raj"), _F_AF), (("f", "rm"), _F_AF), (("f", "ro"), _F_AST), (("f", "ru"), _F_AST), (("f", "sa"), _F_AST), (("f", "sah"), _F_AF), (("f", "sat"), _F_AF), (("f", "sc"), _F_AST), (("f", "sd"), _F_AF), (("f", "sd-Deva"), _F_AST), (("f", "si"), _F_AF), (("f", "sk"), _F_AST), (("f", "sl"), _F_AF), (("f", "so"), _F_AF), (("f", "sq"), _F_AST), (("f", "sr"), _F_AF), (("f", "sr-Latn"), _F_AF), (("f", "su"), _F_AST), (("f", "sv"), _F_AF), (("f", "sw"), _F_AF), (("f", "syr"), _F_AR), (("f", "szl"), _F_AF), (("f", "ta"), _F_AST), (("f", "te"), _F_AF), (("f", "tg"), _F_AF), (("f", "th"), _F_AF), (("f", "ti"), _F_AF), (("f", "tk"), _F_AF), (("f", "to"), _F_AST), (("f", "tr"), _F_AF), (("f", "tt"), _F_AST), (("f", "ug"), _F_AF), (("f", "uk"), _F_AST), (("f", "und"), _F_AF), (("f", "ur"), _F_AF), (("f", "uz"), _F_AST), (("f", "uz-Cyrl"), _F_AF), (("f", "vec"), _F_AST), (("f", "vi"), _F_VI), (("f", "vmw"), _F_AF), (("f", "wo"), _F_EL), (("f", "xh"), _F_AF), (("f", "xnr"), _F_XNR), (("f", "yo"), _F_AF), (("f", "yrl"), _F_AF), (("f", "yue"), _F_AF), (("f", "yue-Hans"), _F_AF), (("f", "za"), _F_AF), (("f", "zh"), _F_AF), (("f", "zh-Hant"), _F_AF), (("f", "zu"), _F_AF), (("l", "af"), _F_AF), (("l", "am"), _F_AF), (("l", "ar"), _F_AR), (("l", "as"), _F_AF), (("l", "ast"), _F_AST), (("l", "az"), _F_AF), (("l", "be"), _F_AST), (("l", "bg"), _F_AST), (("l", "bgc"), _F_AF), (("l", "bho"), _F_AF), (("l", "blo"), _F_AST), (("l", "bn"), _F_AF), (("l", "br"), _F_AST), (("l", "brx"), _F_AST), (("l", "bs"), _F_AST), (("l", "bs-Cyrl"), _F_AF), (("l", "ca"), _F_AST), (("l", "ceb"), _F_AST), (("l", "chr"), _F_AST), (("l", "cs"), _F_AF), (("l", "csw"), _F_AF), (("l", "cv"), _F_AST), (("l", "cy"), _F_AST), (("l", "da"), _F_AF), (("l", "de"), _F_AST), (("l", "doi"), _F_AST), (("l", "dsb"), _F_AF), (("l", "el"), _F_EL), (("l", "en"), _F_AST), (("l", "en-MV"), _F_AF), (("l", "eo"), _F_AF), (("l", "es"), _F_AST), (("l", "et"), _F_AF), (("l", "eu"), _F_EU), (("l", "fa"), _F_FA), (("l", "ff-Adlm"), _F_AF), (("l", "fi"), _F_AF), (("l", "fil"), _F_AST), (("l", "fo"), _F_AST), (("l", "fr"), _F_AST), (("l", "fy"), _F_AF), (("l", "ga"), _F_AF), (("l", "gd"), _F_AF), (("l", "gl"), _F_AST), (("l", "gu"), _F_AF), (("l", "ha"), _F_AST), (("l", "he"), _F_AST), (("l", "hi"), _F_AST), (("l", "hr"), _F_AF), (("l", "hsb"), _F_AF), (("l", "hu"), _F_AF), (("l", "hy"), _F_AST), (("l", "ia"), _F_AF), (("l", "id"), _F_AF), (("l", "ie"), _F_AF), (("l", "ig"), _F_AST), (("l", "is"), _F_AST), (("l", "it"), _F_AF), (("l", "ja"), _F_AF), (("l", "jv"), _F_AF), (("l", "ka"), _F_AST), (("l", "kea"), _F_AST), (("l", "kgp"), _F_AF), (("l", "kk"), _F_AST), (("l", "km"), _F_AST), (("l", "kn"), _F_AF), (("l", "ko"), _F_AF), (("l", "kok"), _F_AF), (("l", "ks"), _F_AST), (("l", "ks-Deva"), _F_AST), (("l", "ku"), _F_AF), (("l", "kxv"), _F_AST), (("l", "kxv-Deva"), _F_AF), (("l", "kxv-Orya"), _F_AF), (("l", "kxv-Telu"), _F_AF), (("l", "ky"), _F_AF), (("l", "lb"), _F_AF), (("l", "lij"), _F_AF), (("l", "lmo"), _F_AF), (("l", "lo"), _F_AST), (("l", "lt"), _F_AF), (("l", "lv"), _F_AF), (("l", "mai"), _F_AST), (("l", "mi"), _F_AF), (("l", "mk"), _F_AST), (("l", "ml"), _F_AF), (("l", "mn"), _F_AF), (("l", "mni"), _F_AST), (("l", "mr"), _F_AST), (("l", "ms"), _F_AF), (("l", "mt"), _F_AF), (("l", "my"), _F_AF), (("l", "nds"), _F_AF), (("l", "ne"), _F_AF), (("l", "nl"), _F_AST), (("l", "nn"), _L_NN), (("l", "no"), _F_AST), (("l", "nqo"), _F_AF), (("l", "oc"), _F_AF), (("l", "or"), _F_AST), (("l", "pa"), _F_AF), (("l", "pcm"), _F_AST), (("l", "pl"), _F_AF), (("l", "prg"), _F_AF), (("l", "ps"), _F_AF), (("l", "pt"), _F_AF), (("l", "pt-PT"), _F_AST), (("l", "qu"), _F_VI), (("l", "raj"), _F_AF), (("l", "rm"), _F_AF), (("l", "ro"), _F_AST), (("l", "ru"), _F_AST), (("l", "sa"), _F_AST), (("l", "sah"), _F_AF), (("l", "sat"), _F_AF), (("l", "sc"), _F_AST), (("l", "sd"), _F_AF), (("l", "sd-Deva"), _F_AST), (("l", "si"), _F_AF), (("l", "sk"), _F_AST), (("l", "sl"), _F_AF), (("l", "so"), _F_AF), (("l", "sq"), _F_AST), (("l", "sr"), _F_AF), (("l", "sr-Latn"), _F_AF), (("l", "su"), _F_AST), (("l", "sv"), _F_AF), (("l", "sw"), _F_AF), (("l", "syr"), _F_AR), (("l", "szl"), _F_AF), (("l", "ta"), _F_AST), (("l", "te"), _F_AF), (("l", "tg"), _F_AF), (("l", "th"), _F_AF), (("l", "ti"), _F_AF), (("l", "tk"), _F_AF), (("l", "to"), _F_AST), (("l", "tr"), _F_AF), (("l", "tt"), _F_AST), (("l", "ug"), _F_AF), (("l", "uk"), _F_AST), (("l", "und"), _F_AF), (("l", "ur"), _F_AF), (("l", "uz"), _F_AST), (("l", "uz-Cyrl"), _F_AF), (("l", "vec"), _F_AST), (("l", "vi"), _F_VI), (("l", "vmw"), _F_AF), (("l", "wo"), _F_EL), (("l", "xh"), _F_AF), (("l", "xnr"), _F_XNR), (("l", "yo"), _F_AF), (("l", "yrl"), _F_AF), (("l", "yue"), _F_AF), (("l", "yue-Hans"), _F_AF), (("l", "za"), _F_AF), (("l", "zh"), _F_AF), (("l", "zh-Hant"), _F_AF), (("l", "zu"), _F_AF), (("m", "af"), _F_AF), (("m", "am"), _F_AF), (("m", "ar"), _F_AR), (("m", "as"), _F_AF), (("m", "ast"), _F_AST), (("m", "az"), _F_AF), (("m", "be"), _F_AST), (("m", "bg"), _F_AST), (("m", "bgc"), _F_AF), (("m", "bho"), _F_AF), (("m", "blo"), _F_AST), (("m", "bn"), _F_AF), (("m", "br"), _F_AST), (("m", "brx"), _F_AST), (("m", "bs"), _F_AF), (("m", "bs-Cyrl"), _F_AF), (("m", "ca"), _F_AST), (("m", "ceb"), _F_AST), (("m", "chr"), _F_AST), (("m", "cs"), _F_AF), (("m", "csw"), _F_AF), (("m", "cv"), _F_AST), (("m", "cy"), _F_AF), (("m", "da"), _F_AF), (("m", "de"), _F_AST), (("m", "doi"), _F_AST), (("m", "dsb"), _F_AF), (("m", "el"), _F_AST), (("m", "en"), _F_AST), (("m", "en-MV"), _F_AF), (("m", "eo"), _F_AF), (("m", "es"), _F_AST), (("m", "et"), _F_AF), (("m", "eu"), _F_EU), (("m", "fa"), _M_FA), (("m", "ff-Adlm"), _F_AF), (("m", "fi"), _F_AF), (("m", "fil"), _F_AST), (("m", "fo"), _F_AST), (("m", "fr"), _F_AST), (("m", "fy"), _F_AF), (("m", "ga"), _F_AF), (("m", "gd"), _F_AF), (("m", "gl"), _F_AST), (("m", "gu"), _F_AF), (("m", "ha"), _F_AST), (("m", "he"), _F_AST), (("m", "hi"), _F_AST), (("m", "hi-Latn"), _F_AF), (("m", "hr"), _F_AF), (("m", "hsb"), _F_AF), (("m", "hu"), _F_AF), (("m", "hy"), _F_AST), (("m", "ia"), _F_AF), (("m", "id"), _F_AF), (("m", "ie"), _F_AF), (("m", "ig"), _F_AST), (("m", "is"), _F_AST), (("m", "it"), _F_AST), (("m", "ja"), _F_AF), (("m", "jv"), _F_AST), (("m", "ka"), _F_AST), (("m", "kea"), _F_AST), (("m", "kgp"), _F_AF), (("m", "kk"), _F_AST), (("m", "km"), _F_AST), (("m", "kn"), _F_AF), (("m", "ko"), _F_AF), (("m", "kok"), _F_AF), (("m", "ks"), _F_AST), (("m", "ks-Deva"), _F_AST), (("m", "ku"), _F_AF), (("m", "kxv"), _F_AST), (("m", "kxv-Deva"), _F_AF), (("m", "kxv-Orya"), _F_AF), (("m", "kxv-Telu"), _F_AF), (("m", "ky"), _F_AF), (("m", "lb"), _F_AF), (("m", "lij"), _F_AF), (("m", "lmo"), _F_AF), (("m", "lo"), _F_AST), (("m", "lt"), _F_AF), (("m", "lv"), _F_AF), (("m", "mai"), _F_AST), (("m", "mi"), _F_AF), (("m", "mk"), _F_AST), (("m", "ml"), _F_AF), (("m", "mn"), _F_AF), (("m", "mni"), _F_AST), (("m", "mr"), _F_AST), (("m", "ms"), _F_AST), (("m", "mt"), _F_AF), (("m", "my"), _F_AF), (("m", "nds"), _F_AF), (("m", "ne"), _F_AST), (("m", "nl"), _F_AST), (("m", "no"), _F_AST), (("m", "nqo"), _F_AF), (("m", "oc"), _F_AF), (("m", "or"), _F_AST), (("m", "pa"), _F_AST), (("m", "pcm"), _F_AF), (("m", "pl"), _F_AST), (("m", "prg"), _F_AF), (("m", "ps"), _F_AF), (("m", "pt"), _F_AF), (("m", "pt-PT"), _F_AST), (("m", "qu"), _F_AF), (("m", "raj"), _F_AF), (("m", "rm"), _F_AF), (("m", "ro"), _F_AST), (("m", "ru"), _F_AST), (("m", "sa"), _F_AST), (("m", "sah"), _F_AF), (("m", "sat"), _F_AF), (("m", "sc"), _F_AST), (("m", "sd"), _F_AF), (("m", "sd-Deva"), _F_AST), (("m", "si"), _F_AF), (("m", "sk"), _F_AST), (("m", "sl"), _F_AST), (("m", "so"), _F_AF), (("m", "sq"), _F_AST), (("m", "sr"), _F_AF), (("m", "sr-Latn"), _F_AF), (("m", "su"), _F_AST), (("m", "sv"), _F_AF), (("m", "sw"), _F_AF), (("m", "syr"), _F_AR), (("m", "szl"), _F_AF), (("m", "ta"), _F_AST), (("m", "te"), _F_AF), (("m", "tg"), _F_AF), (("m", "th"), _F_AF), (("m", "ti"), _F_AF), (("m", "tk"), _F_AF), (("m", "to"), _F_AST), (("m", "tr"), _F_AF), (("m", "tt"), _F_AST), (("m", "ug"), _F_AR), (("m", "uk"), _F_AST), (("m", "und"), _F_AF), (("m", "ur"), _F_AF), (("m", "uz"), _F_AST), (("m", "uz-Cyrl"), _F_AF), (("m", "vec"), _F_AST), (("m", "vi"), _F_VI), (("m", "vmw"), _F_AF), (("m", "wo"), _F_EL), (("m", "xh"), _F_AF), (("m", "xnr"), _F_AST), (("m", "yo"), _F_AF), (("m", "yrl"), _F_AF), (("m", "yue"), _F_AF), (("m", "yue-Hans"), _F_AF), (("m", "za"), _F_AF), (("m", "zh"), _F_AF), (("m", "zh-Hant"), _F_AF), (("m", "zu"), _F_AF), (("s", "af"), _F_AF), (("s", "am"), _F_AF), (("s", "ar"), _F_AR), (("s", "as"), _F_AF), (("s", "ast"), _F_AF), (("s", "az"), _F_AF), (("s", "be"), _F_AST), (("s", "bg"), _F_AST), (("s", "bgc"), _F_AF), (("s", "bho"), _F_AF), (("s", "blo"), _F_AST), (("s", "bn"), _F_AF), (("s", "br"), _F_AF), (("s", "brx"), _F_AST), (("s", "bs"), _F_AF), (("s", "bs-Cyrl"), _F_AF), (("s", "ca"), _F_AF), (("s", "ceb"), _F_AST), (("s", "chr"), _F_AST), (("s", "cs"), _F_AF), (("s", "csw"), _F_AF), (("s", "cv"), _F_AST), (("s", "cy"), _F_AF), (("s", "da"), _F_AF), (("s", "de"), _F_AST), (("s", "doi"), _F_AST), (("s", "dsb"), _F_AF), (("s", "el"), _F_AST), (("s", "en"), _F_AST), (("s", "en-MV"), _F_AF), (("s", "eo"), _F_AF), (("s", "es"), _F_AST), (("s", "et"), _F_AF), (("s", "eu"), _F_EU), (("s", "fa"), _M_FA), (("s", "ff-Adlm"), _F_AF), (("s", "fi"), _F_AF), (("s", "fil"), _F_AST), (("s", "fo"), _F_AST), (("s", "fr"), _F_AF), (("s", "fr-ML"), _F_AST), (("s", "fy"), _F_AF), (("s", "ga"), _F_AF), (("s", "gd"), _F_AF), (("s", "gl"), _F_AST), (("s", "gu"), _F_AF), (("s", "ha"), _F_AST), (("s", "he"), _F_AST), (("s", "hi"), _F_AST), (("s", "hi-Latn"), _F_AF), (("s", "hr"), _F_AF), (("s", "hsb"), _F_AF), (("s", "hu"), _F_AF), (("s", "hy"), _F_AST), (("s", "ia"), _F_AF), (("s", "id"), _F_AF), (("s", "ie"), _F_AF), (("s", "ig"), _F_AST), (("s", "is"), _F_AST), (("s", "it"), _F_AST), (("s", "ja"), _F_AF), (("s", "jv"), _F_AST), (("s", "ka"), _F_AST), (("s", "kea"), _F_AST), (("s", "kgp"), _F_AF), (("s", "kk"), _F_AST), (("s", "km"), _F_AST), (("s", "kn"), _F_AF), (("s", "ko"), _F_AF), (("s", "kok"), _F_AF), (("s", "ks"), _F_AST), (("s", "ks-Deva"), _F_AST), (("s", "ku"), _F_AF), (("s", "kxv"), _F_AST), (("s", "kxv-Deva"), _F_AF), (("s", "kxv-Orya"), _F_AF), (("s", "kxv-Telu"), _F_AF), (("s", "ky"), _F_AF), (("s", "lb"), _F_AF), (("s", "lij"), _F_AF), (("s", "lmo"), _F_AF), (("s", "lo"), _F_AST), (("s", "lt"), _F_AF), (("s", "lv"), _F_AF), (("s", "mai"), _F_AST), (("s", "mi"), _F_AF), (("s", "mk"), _F_AST), (("s", "ml"), _F_AF), (("s", "mn"), _F_AF), (("s", "mni"), _F_AST), (("s", "mr"), _F_AST), (("s", "ms"), _F_AST), (("s", "mt"), _F_AF), (("s", "my"), _F_AF), (("s", "nds"), _F_AF), (("s", "ne"), _F_AST), (("s", "nl"), _F_AST), (("s", "no"), _F_AST), (("s", "nqo"), _F_AF), (("s", "oc"), _F_AF), (("s", "or"), _F_AST), (("s", "pa"), _F_AST), (("s", "pcm"), _F_AF), (("s", "pl"), _F_AST), (("s", "prg"), _F_AF), (("s", "ps"), _F_AF), (("s", "pt"), _F_AF), (("s", "pt-PT"), _F_AST), (("s", "qu"), _F_AF), (("s", "raj"), _F_AF), (("s", "rm"), _F_AF), (("s", "ro"), _F_AST), (("s", "ru"), _F_AST), (("s", "sa"), _F_AST), (("s", "sah"), _F_AF), (("s", "sat"), _F_AF), (("s", "sc"), _F_AST), (("s", "sd"), _F_AF), (("s", "sd-Deva"), _F_AST), (("s", "si"), _F_AF), (("s", "sk"), _F_AF), (("s", "sl"), _F_AST), (("s", "so"), _F_AF), (("s", "sq"), _F_AST), (("s", "sr"), _F_AF), (("s", "sr-Latn"), _F_AF), (("s", "su"), _F_AST), (("s", "sv"), _F_AF), (("s", "sw"), _F_AF), (("s", "syr"), _F_AR), (("s", "szl"), _F_AF), (("s", "ta"), _F_AST), (("s", "te"), _F_AF), (("s", "tg"), _F_AF), (("s", "th"), _F_AF), (("s", "ti"), _F_AF), (("s", "tk"), _F_AF), (("s", "to"), _F_AF), (("s", "tr"), _F_AF), (("s", "tt"), _F_AST), (("s", "ug"), _F_AR), (("s", "uk"), _F_AST), (("s", "und"), _F_AF), (("s", "ur"), _F_AF), (("s", "uz"), _F_AST), (("s", "uz-Cyrl"), _F_AF), (("s", "vec"), _F_AST), (("s", "vi"), _F_VI), (("s", "vmw"), _F_AF), (("s", "wo"), _F_EL), (("s", "xh"), _F_AF), (("s", "xnr"), _F_AST), (("s", "yo"), _F_AF), (("s", "yrl"), _F_AF), (("s", "yue"), _F_AF), (("s", "yue-Hans"), _F_AF), (("s", "za"), _F_AF), (("s", "zh"), _F_AF), (("s", "zh-Hant"), _F_AF), (("s", "zu"), _F_AF)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DateTimePatternV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
        impl icu_provider::CanLoad<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn can_load(&self, req: icu_provider::DataRequest) -> Result<bool, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::contains(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, req.id))
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_date_time_pattern_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_date_time_pattern_v1_marker as impl_date_time_pattern_v1_marker;
