// @generated
/// Implement `DataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_patterns_datetime_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DateTimePatternV1Marker>, icu_provider::DataError> {
                static QU_X_L: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } };
                static EU_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } };
                static EL_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } };
                static NN_X_L: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } };
                static XNR_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } };
                static EN_MV_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } };
                static AST_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } };
                static FA_X_M: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } };
                static FA_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } };
                static AR_X_F: <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } };
                static DATA: [(&str, &str, &<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable); 277usize] = [("ar", "f", &AR_X_F), ("ar", "l", &AR_X_F), ("ar", "m", &AR_X_F), ("ar", "s", &AR_X_F), ("ast", "f", &AST_X_F), ("ast", "l", &AST_X_F), ("ast", "m", &AST_X_F), ("be", "f", &AST_X_F), ("be", "l", &AST_X_F), ("be", "m", &AST_X_F), ("be", "s", &AST_X_F), ("bg", "f", &AST_X_F), ("bg", "l", &AST_X_F), ("bg", "m", &AST_X_F), ("bg", "s", &AST_X_F), ("blo", "f", &AST_X_F), ("blo", "l", &AST_X_F), ("blo", "m", &AST_X_F), ("blo", "s", &AST_X_F), ("br", "f", &AST_X_F), ("br", "l", &AST_X_F), ("br", "m", &AST_X_F), ("brx", "f", &AST_X_F), ("brx", "l", &AST_X_F), ("brx", "m", &AST_X_F), ("brx", "s", &AST_X_F), ("bs", "f", &AST_X_F), ("bs", "l", &AST_X_F), ("ca", "f", &AST_X_F), ("ca", "l", &AST_X_F), ("ca", "m", &AST_X_F), ("ceb", "f", &AST_X_F), ("ceb", "l", &AST_X_F), ("ceb", "m", &AST_X_F), ("ceb", "s", &AST_X_F), ("chr", "f", &AST_X_F), ("chr", "l", &AST_X_F), ("chr", "m", &AST_X_F), ("chr", "s", &AST_X_F), ("cv", "f", &AST_X_F), ("cv", "l", &AST_X_F), ("cv", "m", &AST_X_F), ("cv", "s", &AST_X_F), ("cy", "f", &AST_X_F), ("cy", "l", &AST_X_F), ("de", "f", &AST_X_F), ("de", "l", &AST_X_F), ("de", "m", &AST_X_F), ("de", "s", &AST_X_F), ("doi", "f", &AST_X_F), ("doi", "l", &AST_X_F), ("doi", "m", &AST_X_F), ("doi", "s", &AST_X_F), ("el", "f", &EL_X_F), ("el", "l", &EL_X_F), ("el", "m", &AST_X_F), ("el", "s", &AST_X_F), ("en", "f", &AST_X_F), ("en", "l", &AST_X_F), ("en", "m", &AST_X_F), ("en", "s", &AST_X_F), ("en-MV", "f", &EN_MV_X_F), ("en-MV", "l", &EN_MV_X_F), ("en-MV", "m", &EN_MV_X_F), ("en-MV", "s", &EN_MV_X_F), ("es", "f", &AST_X_F), ("es", "l", &AST_X_F), ("es", "m", &AST_X_F), ("es", "s", &AST_X_F), ("eu", "f", &EU_X_F), ("eu", "l", &EU_X_F), ("eu", "m", &EU_X_F), ("eu", "s", &EU_X_F), ("fa", "f", &FA_X_F), ("fa", "l", &FA_X_F), ("fa", "m", &FA_X_M), ("fa", "s", &FA_X_M), ("fil", "f", &AST_X_F), ("fil", "l", &AST_X_F), ("fil", "m", &AST_X_F), ("fil", "s", &AST_X_F), ("fo", "f", &AST_X_F), ("fo", "l", &AST_X_F), ("fo", "m", &AST_X_F), ("fo", "s", &AST_X_F), ("fr", "f", &AST_X_F), ("fr", "l", &AST_X_F), ("fr", "m", &AST_X_F), ("fr-ML", "s", &AST_X_F), ("gl", "f", &AST_X_F), ("gl", "l", &AST_X_F), ("gl", "m", &AST_X_F), ("gl", "s", &AST_X_F), ("ha", "l", &AST_X_F), ("ha", "m", &AST_X_F), ("ha", "s", &AST_X_F), ("he", "f", &AST_X_F), ("he", "l", &AST_X_F), ("he", "m", &AST_X_F), ("he", "s", &AST_X_F), ("hi", "f", &AST_X_F), ("hi", "l", &AST_X_F), ("hi", "m", &AST_X_F), ("hi", "s", &AST_X_F), ("hi-Latn", "m", &EN_MV_X_F), ("hi-Latn", "s", &EN_MV_X_F), ("hy", "f", &AST_X_F), ("hy", "l", &AST_X_F), ("hy", "m", &AST_X_F), ("hy", "s", &AST_X_F), ("ig", "f", &AST_X_F), ("ig", "l", &AST_X_F), ("ig", "m", &AST_X_F), ("ig", "s", &AST_X_F), ("is", "f", &AST_X_F), ("is", "l", &AST_X_F), ("is", "m", &AST_X_F), ("is", "s", &AST_X_F), ("it", "m", &AST_X_F), ("it", "s", &AST_X_F), ("jv", "m", &AST_X_F), ("jv", "s", &AST_X_F), ("ka", "f", &AST_X_F), ("ka", "l", &AST_X_F), ("ka", "m", &AST_X_F), ("ka", "s", &AST_X_F), ("kea", "f", &AST_X_F), ("kea", "l", &AST_X_F), ("kea", "m", &AST_X_F), ("kea", "s", &AST_X_F), ("kk", "f", &AST_X_F), ("kk", "l", &AST_X_F), ("kk", "m", &AST_X_F), ("kk", "s", &AST_X_F), ("km", "f", &AST_X_F), ("km", "l", &AST_X_F), ("km", "m", &AST_X_F), ("km", "s", &AST_X_F), ("ks", "f", &AST_X_F), ("ks", "l", &AST_X_F), ("ks", "m", &AST_X_F), ("ks", "s", &AST_X_F), ("ks-Deva", "f", &AST_X_F), ("ks-Deva", "l", &AST_X_F), ("ks-Deva", "m", &AST_X_F), ("ks-Deva", "s", &AST_X_F), ("kxv", "f", &AST_X_F), ("kxv", "l", &AST_X_F), ("kxv", "m", &AST_X_F), ("kxv", "s", &AST_X_F), ("lo", "f", &AST_X_F), ("lo", "l", &AST_X_F), ("lo", "m", &AST_X_F), ("lo", "s", &AST_X_F), ("mai", "f", &AST_X_F), ("mai", "l", &AST_X_F), ("mai", "m", &AST_X_F), ("mai", "s", &AST_X_F), ("mk", "f", &AST_X_F), ("mk", "l", &AST_X_F), ("mk", "m", &AST_X_F), ("mk", "s", &AST_X_F), ("mni", "f", &AST_X_F), ("mni", "l", &AST_X_F), ("mni", "m", &AST_X_F), ("mni", "s", &AST_X_F), ("mr", "f", &AST_X_F), ("mr", "l", &AST_X_F), ("mr", "m", &AST_X_F), ("mr", "s", &AST_X_F), ("ms", "m", &AST_X_F), ("ms", "s", &AST_X_F), ("ne", "m", &AST_X_F), ("ne", "s", &AST_X_F), ("nl", "f", &AST_X_F), ("nl", "l", &AST_X_F), ("nl", "m", &AST_X_F), ("nl", "s", &AST_X_F), ("nn", "f", &EN_MV_X_F), ("nn", "l", &NN_X_L), ("no", "f", &AST_X_F), ("no", "l", &AST_X_F), ("no", "m", &AST_X_F), ("no", "s", &AST_X_F), ("or", "f", &AST_X_F), ("or", "l", &AST_X_F), ("or", "m", &AST_X_F), ("or", "s", &AST_X_F), ("pa", "m", &AST_X_F), ("pa", "s", &AST_X_F), ("pcm", "f", &AST_X_F), ("pcm", "l", &AST_X_F), ("pl", "m", &AST_X_F), ("pl", "s", &AST_X_F), ("pt-PT", "f", &AST_X_F), ("pt-PT", "l", &AST_X_F), ("pt-PT", "m", &AST_X_F), ("pt-PT", "s", &AST_X_F), ("qu", "l", &QU_X_L), ("ro", "f", &AST_X_F), ("ro", "l", &AST_X_F), ("ro", "m", &AST_X_F), ("ro", "s", &AST_X_F), ("ru", "f", &AST_X_F), ("ru", "l", &AST_X_F), ("ru", "m", &AST_X_F), ("ru", "s", &AST_X_F), ("sa", "f", &AST_X_F), ("sa", "l", &AST_X_F), ("sa", "m", &AST_X_F), ("sa", "s", &AST_X_F), ("sc", "f", &AST_X_F), ("sc", "l", &AST_X_F), ("sc", "m", &AST_X_F), ("sc", "s", &AST_X_F), ("sd-Deva", "f", &AST_X_F), ("sd-Deva", "l", &AST_X_F), ("sd-Deva", "m", &AST_X_F), ("sd-Deva", "s", &AST_X_F), ("sk", "f", &AST_X_F), ("sk", "l", &AST_X_F), ("sk", "m", &AST_X_F), ("sl", "m", &AST_X_F), ("sl", "s", &AST_X_F), ("sq", "f", &AST_X_F), ("sq", "l", &AST_X_F), ("sq", "m", &AST_X_F), ("sq", "s", &AST_X_F), ("su", "f", &AST_X_F), ("su", "l", &AST_X_F), ("su", "m", &AST_X_F), ("su", "s", &AST_X_F), ("syr", "f", &AR_X_F), ("syr", "l", &AR_X_F), ("syr", "m", &AR_X_F), ("syr", "s", &AR_X_F), ("ta", "f", &AST_X_F), ("ta", "l", &AST_X_F), ("ta", "m", &AST_X_F), ("ta", "s", &AST_X_F), ("to", "f", &AST_X_F), ("to", "l", &AST_X_F), ("to", "m", &AST_X_F), ("tt", "f", &AST_X_F), ("tt", "l", &AST_X_F), ("tt", "m", &AST_X_F), ("tt", "s", &AST_X_F), ("ug", "m", &AR_X_F), ("ug", "s", &AR_X_F), ("uk", "f", &AST_X_F), ("uk", "l", &AST_X_F), ("uk", "m", &AST_X_F), ("uk", "s", &AST_X_F), ("und", "f", &EN_MV_X_F), ("und", "l", &EN_MV_X_F), ("und", "m", &EN_MV_X_F), ("und", "s", &EN_MV_X_F), ("uz", "f", &AST_X_F), ("uz", "l", &AST_X_F), ("uz", "m", &AST_X_F), ("uz", "s", &AST_X_F), ("vec", "f", &AST_X_F), ("vec", "l", &AST_X_F), ("vec", "m", &AST_X_F), ("vec", "s", &AST_X_F), ("vi", "f", &QU_X_L), ("vi", "l", &QU_X_L), ("vi", "m", &QU_X_L), ("vi", "s", &QU_X_L), ("wo", "f", &EL_X_F), ("wo", "l", &EL_X_F), ("wo", "m", &EL_X_F), ("wo", "s", &EL_X_F), ("xnr", "f", &XNR_X_F), ("xnr", "l", &XNR_X_F), ("xnr", "m", &AST_X_F), ("xnr", "s", &AST_X_F)];
                fn lookup(req: icu_provider::DataRequest) -> Option<&'static <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable> {
                    DATA.binary_search_by(|(l, a, _)| req.locale.strict_cmp(l.as_bytes()).reverse().then_with(|| a.cmp(&&**req.marker_attributes))).map(|i| (*unsafe { DATA.get_unchecked(i) }).2).ok()
                }
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = lookup(req) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.locale.clone());
                    loop {
                        if let Some(payload) = lookup(icu_provider::DataRequest { locale: fallback_iterator.get(), ..req }) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata })
            }
        }
    };
}
/// Implement `IterableDataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_datetime_patterns_datetime_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok(["ar-x-f", "ar-x-l", "ar-x-m", "ar-x-s", "ast-x-f", "ast-x-l", "ast-x-m", "be-x-f", "be-x-l", "be-x-m", "be-x-s", "bg-x-f", "bg-x-l", "bg-x-m", "bg-x-s", "blo-x-f", "blo-x-l", "blo-x-m", "blo-x-s", "br-x-f", "br-x-l", "br-x-m", "brx-x-f", "brx-x-l", "brx-x-m", "brx-x-s", "bs-x-f", "bs-x-l", "ca-x-f", "ca-x-l", "ca-x-m", "ceb-x-f", "ceb-x-l", "ceb-x-m", "ceb-x-s", "chr-x-f", "chr-x-l", "chr-x-m", "chr-x-s", "cv-x-f", "cv-x-l", "cv-x-m", "cv-x-s", "cy-x-f", "cy-x-l", "de-x-f", "de-x-l", "de-x-m", "de-x-s", "doi-x-f", "doi-x-l", "doi-x-m", "doi-x-s", "el-x-f", "el-x-l", "el-x-m", "el-x-s", "en-MV-x-f", "en-MV-x-l", "en-MV-x-m", "en-MV-x-s", "en-x-f", "en-x-l", "en-x-m", "en-x-s", "es-x-f", "es-x-l", "es-x-m", "es-x-s", "eu-x-f", "eu-x-l", "eu-x-m", "eu-x-s", "fa-x-f", "fa-x-l", "fa-x-m", "fa-x-s", "fil-x-f", "fil-x-l", "fil-x-m", "fil-x-s", "fo-x-f", "fo-x-l", "fo-x-m", "fo-x-s", "fr-ML-x-s", "fr-x-f", "fr-x-l", "fr-x-m", "gl-x-f", "gl-x-l", "gl-x-m", "gl-x-s", "ha-x-l", "ha-x-m", "ha-x-s", "he-x-f", "he-x-l", "he-x-m", "he-x-s", "hi-Latn-x-m", "hi-Latn-x-s", "hi-x-f", "hi-x-l", "hi-x-m", "hi-x-s", "hy-x-f", "hy-x-l", "hy-x-m", "hy-x-s", "ig-x-f", "ig-x-l", "ig-x-m", "ig-x-s", "is-x-f", "is-x-l", "is-x-m", "is-x-s", "it-x-m", "it-x-s", "jv-x-m", "jv-x-s", "ka-x-f", "ka-x-l", "ka-x-m", "ka-x-s", "kea-x-f", "kea-x-l", "kea-x-m", "kea-x-s", "kk-x-f", "kk-x-l", "kk-x-m", "kk-x-s", "km-x-f", "km-x-l", "km-x-m", "km-x-s", "ks-Deva-x-f", "ks-Deva-x-l", "ks-Deva-x-m", "ks-Deva-x-s", "ks-x-f", "ks-x-l", "ks-x-m", "ks-x-s", "kxv-x-f", "kxv-x-l", "kxv-x-m", "kxv-x-s", "lo-x-f", "lo-x-l", "lo-x-m", "lo-x-s", "mai-x-f", "mai-x-l", "mai-x-m", "mai-x-s", "mk-x-f", "mk-x-l", "mk-x-m", "mk-x-s", "mni-x-f", "mni-x-l", "mni-x-m", "mni-x-s", "mr-x-f", "mr-x-l", "mr-x-m", "mr-x-s", "ms-x-m", "ms-x-s", "ne-x-m", "ne-x-s", "nl-x-f", "nl-x-l", "nl-x-m", "nl-x-s", "nn-x-f", "nn-x-l", "no-x-f", "no-x-l", "no-x-m", "no-x-s", "or-x-f", "or-x-l", "or-x-m", "or-x-s", "pa-x-m", "pa-x-s", "pcm-x-f", "pcm-x-l", "pl-x-m", "pl-x-s", "pt-PT-x-f", "pt-PT-x-l", "pt-PT-x-m", "pt-PT-x-s", "qu-x-l", "ro-x-f", "ro-x-l", "ro-x-m", "ro-x-s", "ru-x-f", "ru-x-l", "ru-x-m", "ru-x-s", "sa-x-f", "sa-x-l", "sa-x-m", "sa-x-s", "sc-x-f", "sc-x-l", "sc-x-m", "sc-x-s", "sd-Deva-x-f", "sd-Deva-x-l", "sd-Deva-x-m", "sd-Deva-x-s", "sk-x-f", "sk-x-l", "sk-x-m", "sl-x-m", "sl-x-s", "sq-x-f", "sq-x-l", "sq-x-m", "sq-x-s", "su-x-f", "su-x-l", "su-x-m", "su-x-s", "syr-x-f", "syr-x-l", "syr-x-m", "syr-x-s", "ta-x-f", "ta-x-l", "ta-x-m", "ta-x-s", "to-x-f", "to-x-l", "to-x-m", "tt-x-f", "tt-x-l", "tt-x-m", "tt-x-s", "ug-x-m", "ug-x-s", "uk-x-f", "uk-x-l", "uk-x-m", "uk-x-s", "und-x-f", "und-x-l", "und-x-m", "und-x-s", "uz-x-f", "uz-x-l", "uz-x-m", "uz-x-s", "vec-x-f", "vec-x-l", "vec-x-m", "vec-x-s", "vi-x-f", "vi-x-l", "vi-x-m", "vi-x-s", "wo-x-f", "wo-x-l", "wo-x-m", "wo-x-s", "xnr-x-f", "xnr-x-l", "xnr-x-m", "xnr-x-s"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
