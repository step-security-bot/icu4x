// @generated
/// Implement `DataProvider<CopticYearNamesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_coptic_year_names_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COPTIC_YEAR_NAMES_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale, icu::datetime::provider::neo::CopticYearNamesV1Marker> = {
                type S = <icu::datetime::provider::neo::CopticYearNamesV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const _3_AF: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0ERA1ERA0") })
                });
                const _3_BN: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xE0\xA6\xAF\xE0\xA7\x81\xE0\xA6\x97 \xE0\xA7\xA7\xE0\xA6\xAF\xE0\xA7\x81\xE0\xA6\x97 \xE0\xA7\xA6") })
                });
                const _3_DA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\t\x001. tidsr.0. tidsr.") })
                });
                const _3_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x12\0\xD9\xBE\xD8\xB3 \xD8\xA7\xD8\xB2 \xD9\x85\xD8\xB3\xDB\x8C\xD8\xAD\xD9\x82\xD8\xA8\xD9\x84 \xD8\xA7\xD8\xB2 \xD9\x85\xD8\xB3\xDB\x8C\xD8\xAD") })
                });
                const _3_FF_ADLM: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x08\0\xF0\x9E\xA4\x87\xF0\x9E\xA4\x81\xF0\x9E\xA4\x80\xF0\x9E\xA4\x81") })
                });
                const _3_FR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x06\0ap. D.av. D.") })
                });
                const _3_GU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\xE0\xAA\x8F\xE0\xAA\xB0\xE0\xAA\xBE1\xE0\xAA\x8F\xE0\xAA\xB0\xE0\xAA\xBE0") })
                });
                const _3_LV: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x0B\0p\xC4\x93c Diokl.pirms Diokl.") })
                });
                const _3_MK: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x07\0\xD0\x95\xD0\xA0\xD0\x901\xD0\x95\xD0\xA0\xD0\x900") })
                });
                const _3_ML: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\xE0\xB4\x95\xE0\xB4\xBE\xE0\xB4\xB2\xE0\xB4\x98\xE0\xB4\x9F\xE0\xB5\x8D\xE0\xB4\x9F\xE0\xB4\x821\xE0\xB4\x95\xE0\xB4\xBE\xE0\xB4\xB2\xE0\xB4\x98\xE0\xB4\x9F\xE0\xB5\x8D\xE0\xB4\x9F\xE0\xB4\x820") })
                });
                const _3_MR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\xE0\xA4\xAF\xE0\xA5\x81\xE0\xA4\x971\xE0\xA4\xAF\xE0\xA5\x81\xE0\xA4\x970") })
                });
                const _3_NO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x07\x001. t.a.0. t.a.") })
                });
                const _3_PA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\xE0\xA8\x95\xE0\xA8\xBE\xE0\xA8\xB21\xE0\xA8\x95\xE0\xA8\xBE\xE0\xA8\xB20") })
                });
                const _3_RO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0A.M.\xC3\xAE.A.M.") })
                });
                const _3_RU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\xD0\xBE\xD1\x82 \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB.\xD0\xB4\xD0\xBE \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB.") })
                });
                const _3_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0a.M.a.D.") })
                });
                const _3_UR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x07\0\xD8\xAF\xD9\x88\xD8\xB11\xD8\xAF\xD9\x88\xD8\xB10") })
                });
                const _3_ZH: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x0C\0\xE7\xA7\x91\xE6\x99\xAE\xE7\x89\xB9\xE5\x8E\x86\xE7\xA7\x91\xE6\x99\xAE\xE7\x89\xB9\xE5\x8E\x86\xE5\x89\x8D") })
                });
                const _4_DA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x05\x001. t.0. t.") })
                });
                const _4_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x06\0\xD8\xA8.\xD9\x85.\xD9\x82.\xD9\x85.") })
                });
                const _4_NO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x03\0TA1TA0") })
                });
                const _5_DA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x0E\x001. tidsregning0. tidsregning") })
                });
                const _5_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1D\0\xD8\xA8\xD8\xB9\xD8\xAF \xD8\xA7\xD8\xB2 \xD8\xAD\xD9\x84\xD9\x88\xD9\x84 \xD9\x85\xD8\xB3\xDB\x8C\xD8\xAD\xD9\x82\xD8\xA8\xD9\x84 \xD8\xA7\xD8\xB2 \xD8\xAD\xD9\x84\xD9\x88\xD9\x84 \xD9\x85\xD8\xB3\xDB\x8C\xD8\xAD") })
                });
                const _5_FF_ADLM: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0I\0\xF0\x9E\xA4\xA9\xF0\x9E\xA4\xA2\xF0\x9E\xA5\x84\xF0\x9E\xA4\xB1\xF0\x9E\xA4\xAE \xF0\x9E\xA4\x81\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB3\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xA4\xF0\x9E\xA4\xBC\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA5\x84\xF0\x9E\xA4\xB2\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xA3\xF0\x9E\xA4\xAE \xF0\x9E\xA4\x81\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB3\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xA4\xF0\x9E\xA4\xBC\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA5\x84\xF0\x9E\xA4\xB2") })
                });
                const _5_FR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x12\0apr\xC3\xA8s Diocl\xC3\xA9tienavant Diocl\xC3\xA9tien") })
                });
                const _5_HE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\xD7\xA2\xD7\x99\xD7\x93\xD7\x9F 1\xD7\xA2\xD7\x99\xD7\x93\xD7\x9F 0") })
                });
                const _5_LV: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x11\0p\xC4\x93c Diokleti\xC4\x81napirms Diokleti\xC4\x81na") })
                });
                const _5_NO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x0C\x001. tidsalder0. tidsalder") })
                });
                const _5_RO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0dup\xC4\x83 Anno Martyrum\xC3\xAEnainte de Anno Martyrum") })
                });
                const _5_RU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1B\0\xD0\xBE\xD1\x82 \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB\xD0\xB5\xD1\x82\xD0\xB8\xD0\xB0\xD0\xBD\xD0\xB0\xD0\xB4\xD0\xBE \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB\xD0\xB5\xD1\x82\xD0\xB8\xD0\xB0\xD0\xBD\xD0\xB0") })
                });
                const _5_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0adbd") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0annu de sos m\xC3\xA0rtiresin antis de Diocletzianu") })
                });
                icu_provider_baked::binary_search::Data(&[(("3", "af"), _3_AF), (("3", "am"), _3_AF), (("3", "ar"), _3_AF), (("3", "as"), _3_AF), (("3", "ast"), _3_AF), (("3", "az"), _3_AF), (("3", "be"), _3_AF), (("3", "bg"), _3_AF), (("3", "bgc"), _3_AF), (("3", "bho"), _3_AF), (("3", "blo"), _3_AF), (("3", "bn"), _3_BN), (("3", "br"), _3_AF), (("3", "brx"), _3_AF), (("3", "bs"), _3_AF), (("3", "bs-Cyrl"), _3_AF), (("3", "ca"), _3_AF), (("3", "ceb"), _3_AF), (("3", "chr"), _3_AF), (("3", "cs"), _3_AF), (("3", "csw"), _3_AF), (("3", "cv"), _3_AF), (("3", "cy"), _3_AF), (("3", "da"), _3_DA), (("3", "de"), _3_AF), (("3", "doi"), _3_AF), (("3", "dsb"), _3_AF), (("3", "el"), _3_AF), (("3", "en"), _3_AF), (("3", "eo"), _3_AF), (("3", "es"), _3_AF), (("3", "et"), _3_AF), (("3", "eu"), _3_AF), (("3", "fa"), _3_FA), (("3", "ff-Adlm"), _3_FF_ADLM), (("3", "fi"), _3_AF), (("3", "fil"), _3_AF), (("3", "fo"), _3_AF), (("3", "fr"), _3_FR), (("3", "fy"), _3_AF), (("3", "ga"), _3_AF), (("3", "gd"), _3_AF), (("3", "gl"), _3_AF), (("3", "gu"), _3_GU), (("3", "ha"), _3_AF), (("3", "he"), _3_AF), (("3", "hi"), _3_AF), (("3", "hr"), _3_AF), (("3", "hsb"), _3_AF), (("3", "hu"), _3_AF), (("3", "hy"), _3_AF), (("3", "ia"), _3_AF), (("3", "id"), _3_AF), (("3", "ie"), _3_AF), (("3", "ig"), _3_AF), (("3", "is"), _3_AF), (("3", "it"), _3_AF), (("3", "ja"), _3_AF), (("3", "jv"), _3_AF), (("3", "ka"), _3_AF), (("3", "kea"), _3_AF), (("3", "kgp"), _3_AF), (("3", "kk"), _3_AF), (("3", "km"), _3_AF), (("3", "kn"), _3_AF), (("3", "ko"), _3_AF), (("3", "kok"), _3_AF), (("3", "ks"), _3_AF), (("3", "ks-Deva"), _3_AF), (("3", "ku"), _3_AF), (("3", "kxv"), _3_AF), (("3", "kxv-Deva"), _3_AF), (("3", "kxv-Orya"), _3_AF), (("3", "kxv-Telu"), _3_AF), (("3", "ky"), _3_AF), (("3", "lb"), _3_AF), (("3", "lij"), _3_AF), (("3", "lmo"), _3_AF), (("3", "lo"), _3_AF), (("3", "lt"), _3_AF), (("3", "lv"), _3_LV), (("3", "mai"), _3_AF), (("3", "mi"), _3_AF), (("3", "mk"), _3_MK), (("3", "ml"), _3_ML), (("3", "mn"), _3_AF), (("3", "mni"), _3_AF), (("3", "mr"), _3_MR), (("3", "ms"), _3_AF), (("3", "mt"), _3_AF), (("3", "my"), _3_AF), (("3", "nds"), _3_AF), (("3", "ne"), _3_AF), (("3", "nl"), _3_AF), (("3", "no"), _3_NO), (("3", "nqo"), _3_AF), (("3", "oc"), _3_AF), (("3", "or"), _3_AF), (("3", "pa"), _3_PA), (("3", "pcm"), _3_AF), (("3", "pl"), _3_AF), (("3", "prg"), _3_AF), (("3", "ps"), _3_AF), (("3", "pt"), _3_AF), (("3", "qu"), _3_AF), (("3", "raj"), _3_AF), (("3", "rm"), _3_AF), (("3", "ro"), _3_RO), (("3", "ru"), _3_RU), (("3", "sa"), _3_AF), (("3", "sah"), _3_AF), (("3", "sat"), _3_AF), (("3", "sc"), _3_SC), (("3", "sd"), _3_AF), (("3", "sd-Deva"), _3_AF), (("3", "si"), _3_AF), (("3", "sk"), _3_AF), (("3", "sl"), _3_AF), (("3", "so"), _3_AF), (("3", "sq"), _3_AF), (("3", "sr"), _3_AF), (("3", "sr-Latn"), _3_AF), (("3", "su"), _3_AF), (("3", "sv"), _3_AF), (("3", "sw"), _3_AF), (("3", "syr"), _3_AF), (("3", "szl"), _3_AF), (("3", "ta"), _3_AF), (("3", "te"), _3_AF), (("3", "tg"), _3_AF), (("3", "th"), _3_AF), (("3", "ti"), _3_AF), (("3", "tk"), _3_AF), (("3", "to"), _3_AF), (("3", "tr"), _3_AF), (("3", "tt"), _3_AF), (("3", "ug"), _3_AF), (("3", "uk"), _3_AF), (("3", "und"), _3_AF), (("3", "ur"), _3_UR), (("3", "uz"), _3_AF), (("3", "uz-Cyrl"), _3_AF), (("3", "vec"), _3_AF), (("3", "vi"), _3_AF), (("3", "vmw"), _3_AF), (("3", "wo"), _3_AF), (("3", "xh"), _3_AF), (("3", "xnr"), _3_AF), (("3", "yo"), _3_AF), (("3", "yrl"), _3_AF), (("3", "yue"), _3_AF), (("3", "yue-Hans"), _3_AF), (("3", "za"), _3_AF), (("3", "zh"), _3_ZH), (("3", "zh-Hant"), _3_AF), (("3", "zu"), _3_AF), (("4", "af"), _3_AF), (("4", "am"), _3_AF), (("4", "ar"), _3_AF), (("4", "as"), _3_AF), (("4", "ast"), _3_AF), (("4", "az"), _3_AF), (("4", "be"), _3_AF), (("4", "bg"), _3_AF), (("4", "bgc"), _3_AF), (("4", "bho"), _3_AF), (("4", "blo"), _3_AF), (("4", "bn"), _3_BN), (("4", "br"), _3_AF), (("4", "brx"), _3_AF), (("4", "bs"), _3_AF), (("4", "bs-Cyrl"), _3_AF), (("4", "ca"), _3_AF), (("4", "ceb"), _3_AF), (("4", "chr"), _3_AF), (("4", "cs"), _3_AF), (("4", "csw"), _3_AF), (("4", "cv"), _3_AF), (("4", "cy"), _3_AF), (("4", "da"), _4_DA), (("4", "de"), _3_AF), (("4", "doi"), _3_AF), (("4", "dsb"), _3_AF), (("4", "el"), _3_AF), (("4", "en"), _3_AF), (("4", "eo"), _3_AF), (("4", "es"), _3_AF), (("4", "et"), _3_AF), (("4", "eu"), _3_AF), (("4", "fa"), _4_FA), (("4", "ff-Adlm"), _3_FF_ADLM), (("4", "fi"), _3_AF), (("4", "fil"), _3_AF), (("4", "fo"), _3_AF), (("4", "fr"), _3_FR), (("4", "fy"), _3_AF), (("4", "ga"), _3_AF), (("4", "gd"), _3_AF), (("4", "gl"), _3_AF), (("4", "gu"), _3_GU), (("4", "ha"), _3_AF), (("4", "he"), _3_AF), (("4", "hi"), _3_AF), (("4", "hr"), _3_AF), (("4", "hsb"), _3_AF), (("4", "hu"), _3_AF), (("4", "hy"), _3_AF), (("4", "ia"), _3_AF), (("4", "id"), _3_AF), (("4", "ie"), _3_AF), (("4", "ig"), _3_AF), (("4", "is"), _3_AF), (("4", "it"), _3_AF), (("4", "ja"), _3_AF), (("4", "jv"), _3_AF), (("4", "ka"), _3_AF), (("4", "kea"), _3_AF), (("4", "kgp"), _3_AF), (("4", "kk"), _3_AF), (("4", "km"), _3_AF), (("4", "kn"), _3_AF), (("4", "ko"), _3_AF), (("4", "kok"), _3_AF), (("4", "ks"), _3_AF), (("4", "ks-Deva"), _3_AF), (("4", "ku"), _3_AF), (("4", "kxv"), _3_AF), (("4", "kxv-Deva"), _3_AF), (("4", "kxv-Orya"), _3_AF), (("4", "kxv-Telu"), _3_AF), (("4", "ky"), _3_AF), (("4", "lb"), _3_AF), (("4", "lij"), _3_AF), (("4", "lmo"), _3_AF), (("4", "lo"), _3_AF), (("4", "lt"), _3_AF), (("4", "lv"), _3_LV), (("4", "mai"), _3_AF), (("4", "mi"), _3_AF), (("4", "mk"), _3_MK), (("4", "ml"), _3_ML), (("4", "mn"), _3_AF), (("4", "mni"), _3_AF), (("4", "mr"), _3_MR), (("4", "ms"), _3_AF), (("4", "mt"), _3_AF), (("4", "my"), _3_AF), (("4", "nds"), _3_AF), (("4", "ne"), _3_AF), (("4", "nl"), _3_AF), (("4", "no"), _4_NO), (("4", "nqo"), _3_AF), (("4", "oc"), _3_AF), (("4", "or"), _3_AF), (("4", "pa"), _3_PA), (("4", "pcm"), _3_AF), (("4", "pl"), _3_AF), (("4", "prg"), _3_AF), (("4", "ps"), _3_AF), (("4", "pt"), _3_AF), (("4", "qu"), _3_AF), (("4", "raj"), _3_AF), (("4", "rm"), _3_AF), (("4", "ro"), _3_RO), (("4", "ru"), _3_RU), (("4", "sa"), _3_AF), (("4", "sah"), _3_AF), (("4", "sat"), _3_AF), (("4", "sc"), _3_SC), (("4", "sd"), _3_AF), (("4", "sd-Deva"), _3_AF), (("4", "si"), _3_AF), (("4", "sk"), _3_AF), (("4", "sl"), _3_AF), (("4", "so"), _3_AF), (("4", "sq"), _3_AF), (("4", "sr"), _3_AF), (("4", "sr-Latn"), _3_AF), (("4", "su"), _3_AF), (("4", "sv"), _3_AF), (("4", "sw"), _3_AF), (("4", "syr"), _3_AF), (("4", "szl"), _3_AF), (("4", "ta"), _3_AF), (("4", "te"), _3_AF), (("4", "tg"), _3_AF), (("4", "th"), _3_AF), (("4", "ti"), _3_AF), (("4", "tk"), _3_AF), (("4", "to"), _3_AF), (("4", "tr"), _3_AF), (("4", "tt"), _3_AF), (("4", "ug"), _3_AF), (("4", "uk"), _3_AF), (("4", "und"), _3_AF), (("4", "ur"), _3_UR), (("4", "uz"), _3_AF), (("4", "uz-Cyrl"), _3_AF), (("4", "vec"), _3_AF), (("4", "vi"), _3_AF), (("4", "vmw"), _3_AF), (("4", "wo"), _3_AF), (("4", "xh"), _3_AF), (("4", "xnr"), _3_AF), (("4", "yo"), _3_AF), (("4", "yrl"), _3_AF), (("4", "yue"), _3_AF), (("4", "yue-Hans"), _3_AF), (("4", "za"), _3_AF), (("4", "zh"), _3_ZH), (("4", "zh-Hant"), _3_AF), (("4", "zu"), _3_AF), (("5", "af"), _3_AF), (("5", "am"), _3_AF), (("5", "ar"), _3_AF), (("5", "as"), _3_AF), (("5", "ast"), _3_AF), (("5", "az"), _3_AF), (("5", "be"), _3_AF), (("5", "bg"), _3_AF), (("5", "bgc"), _3_AF), (("5", "bho"), _3_AF), (("5", "blo"), _3_AF), (("5", "bn"), _3_BN), (("5", "br"), _3_AF), (("5", "brx"), _3_AF), (("5", "bs"), _3_AF), (("5", "bs-Cyrl"), _3_AF), (("5", "ca"), _3_AF), (("5", "ceb"), _3_AF), (("5", "chr"), _3_AF), (("5", "cs"), _3_AF), (("5", "csw"), _3_AF), (("5", "cv"), _3_AF), (("5", "cy"), _3_AF), (("5", "da"), _5_DA), (("5", "de"), _3_AF), (("5", "doi"), _3_AF), (("5", "dsb"), _3_AF), (("5", "el"), _3_AF), (("5", "en"), _3_AF), (("5", "eo"), _3_AF), (("5", "es"), _3_AF), (("5", "et"), _3_AF), (("5", "eu"), _3_AF), (("5", "fa"), _5_FA), (("5", "ff-Adlm"), _5_FF_ADLM), (("5", "fi"), _3_AF), (("5", "fil"), _3_AF), (("5", "fo"), _3_AF), (("5", "fr"), _5_FR), (("5", "fy"), _3_AF), (("5", "ga"), _3_AF), (("5", "gd"), _3_AF), (("5", "gl"), _3_AF), (("5", "gu"), _3_GU), (("5", "ha"), _3_AF), (("5", "he"), _5_HE), (("5", "hi"), _3_AF), (("5", "hr"), _3_AF), (("5", "hsb"), _3_AF), (("5", "hu"), _3_AF), (("5", "hy"), _3_AF), (("5", "ia"), _3_AF), (("5", "id"), _3_AF), (("5", "ie"), _3_AF), (("5", "ig"), _3_AF), (("5", "is"), _3_AF), (("5", "it"), _3_AF), (("5", "ja"), _3_AF), (("5", "jv"), _3_AF), (("5", "ka"), _3_AF), (("5", "kea"), _3_AF), (("5", "kgp"), _3_AF), (("5", "kk"), _3_AF), (("5", "km"), _3_AF), (("5", "kn"), _3_AF), (("5", "ko"), _3_AF), (("5", "kok"), _3_AF), (("5", "ks"), _3_AF), (("5", "ks-Deva"), _3_AF), (("5", "ku"), _3_AF), (("5", "kxv"), _3_AF), (("5", "kxv-Deva"), _3_AF), (("5", "kxv-Orya"), _3_AF), (("5", "kxv-Telu"), _3_AF), (("5", "ky"), _3_AF), (("5", "lb"), _3_AF), (("5", "lij"), _3_AF), (("5", "lmo"), _3_AF), (("5", "lo"), _3_AF), (("5", "lt"), _3_AF), (("5", "lv"), _5_LV), (("5", "mai"), _3_AF), (("5", "mi"), _3_AF), (("5", "mk"), _3_MK), (("5", "ml"), _3_ML), (("5", "mn"), _3_AF), (("5", "mni"), _3_AF), (("5", "mr"), _3_MR), (("5", "ms"), _3_AF), (("5", "mt"), _3_AF), (("5", "my"), _3_AF), (("5", "nds"), _3_AF), (("5", "ne"), _3_AF), (("5", "nl"), _3_AF), (("5", "no"), _5_NO), (("5", "nqo"), _3_AF), (("5", "oc"), _3_AF), (("5", "or"), _3_AF), (("5", "pa"), _3_PA), (("5", "pcm"), _3_AF), (("5", "pl"), _3_AF), (("5", "prg"), _3_AF), (("5", "ps"), _3_AF), (("5", "pt"), _3_AF), (("5", "qu"), _3_AF), (("5", "raj"), _3_AF), (("5", "rm"), _3_AF), (("5", "ro"), _5_RO), (("5", "ru"), _5_RU), (("5", "sa"), _3_AF), (("5", "sah"), _3_AF), (("5", "sat"), _3_AF), (("5", "sc"), _5_SC), (("5", "sd"), _3_AF), (("5", "sd-Deva"), _3_AF), (("5", "si"), _3_AF), (("5", "sk"), _3_AF), (("5", "sl"), _3_AF), (("5", "so"), _3_AF), (("5", "sq"), _3_AF), (("5", "sr"), _3_AF), (("5", "sr-Latn"), _3_AF), (("5", "su"), _3_AF), (("5", "sv"), _3_AF), (("5", "sw"), _3_AF), (("5", "syr"), _3_AF), (("5", "szl"), _3_AF), (("5", "ta"), _3_AF), (("5", "te"), _3_AF), (("5", "tg"), _3_AF), (("5", "th"), _3_AF), (("5", "ti"), _3_AF), (("5", "tk"), _3_AF), (("5", "to"), _3_AF), (("5", "tr"), _3_AF), (("5", "tt"), _3_AF), (("5", "ug"), _3_AF), (("5", "uk"), _3_AF), (("5", "und"), _3_AF), (("5", "ur"), _3_UR), (("5", "uz"), _3_AF), (("5", "uz-Cyrl"), _3_AF), (("5", "vec"), _3_AF), (("5", "vi"), _3_AF), (("5", "vmw"), _3_AF), (("5", "wo"), _3_AF), (("5", "xh"), _3_AF), (("5", "xnr"), _3_AF), (("5", "yo"), _3_AF), (("5", "yrl"), _3_AF), (("5", "yue"), _3_AF), (("5", "yue-Hans"), _3_AF), (("5", "za"), _3_AF), (("5", "zh"), _3_ZH), (("5", "zh-Hant"), _3_AF), (("5", "zu"), _3_AF)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::CopticYearNamesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::CopticYearNamesV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COPTIC_YEAR_NAMES_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::CopticYearNamesV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COPTIC_YEAR_NAMES_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::CopticYearNamesV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
        impl icu_provider::CanLoad<icu::datetime::provider::neo::CopticYearNamesV1Marker> for $provider {
            fn can_load(&self, req: icu_provider::DataRequest) -> Result<bool, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::contains(&Self::DATA_COPTIC_YEAR_NAMES_V1_MARKER, req.id))
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_coptic_year_names_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::CopticYearNamesV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COPTIC_YEAR_NAMES_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_coptic_year_names_v1_marker as impl_coptic_year_names_v1_marker;
