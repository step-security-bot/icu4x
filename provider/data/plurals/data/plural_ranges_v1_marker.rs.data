// @generated
/// Implement `DataProvider<PluralRangesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_plural_ranges_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_PLURAL_RANGES_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale, icu::plurals::provider::PluralRangesV1Marker> = {
                type S = <icu::plurals::provider::PluralRangesV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const __AF: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0") })
                    },
                };
                const __AM: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(zerovec::ZeroVec::new(), zerovec::ZeroVec::new())
                    },
                };
                const __AR: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02\x03\x12\x13#") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\x01\x01\0") })
                    },
                };
                const __FA: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\"") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0") })
                    },
                };
                const __HE: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02\x03#") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\0") })
                    },
                };
                const __KA: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02 ") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x02") })
                    },
                };
                const __LV: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x01\x11!") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\0") })
                    },
                };
                const __MK: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02\"") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0") })
                    },
                };
                const __RO: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"B") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x04") })
                    },
                };
                const __SL: &S = &icu::plurals::provider::PluralRangesV1 {
                    ranges: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02\"2B") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x04\x04\x04\x04") })
                    },
                };
                icu_provider_baked::binary_search::Data(&[("af", __AF), ("am", __AM), ("ar", __AR), ("as", __AM), ("ast", __AM), ("az", __AM), ("be", __AM), ("bg", __AF), ("bgc", __AM), ("bho", __AM), ("blo", __AM), ("bn", __AM), ("br", __AM), ("brx", __AM), ("bs", __AM), ("bs-Cyrl", __AM), ("ca", __AF), ("ceb", __AM), ("chr", __AM), ("cs", __AM), ("csw", __AM), ("cv", __AM), ("cy", __AM), ("da", __AM), ("de", __AM), ("doi", __AM), ("dsb", __AM), ("el", __AM), ("en", __AF), ("eo", __AM), ("es", __AF), ("et", __AF), ("eu", __AF), ("fa", __FA), ("ff-Adlm", __AM), ("fi", __AF), ("fil", __AM), ("fo", __AM), ("fr", __AM), ("fy", __AM), ("ga", __AM), ("gd", __AM), ("gl", __AM), ("gu", __AM), ("ha", __AM), ("he", __HE), ("hi", __AM), ("hr", __AM), ("hsb", __AM), ("hu", __AM), ("hy", __AM), ("ia", __AF), ("id", __AM), ("ie", __AM), ("ig", __AM), ("is", __AM), ("it", __AM), ("ja", __AM), ("jv", __AM), ("ka", __KA), ("kea", __AM), ("kgp", __AM), ("kk", __AM), ("km", __AM), ("kn", __AM), ("ko", __AM), ("kok", __AM), ("ks", __AM), ("ks-Deva", __AM), ("ku", __AM), ("kxv", __AM), ("kxv-Deva", __AM), ("kxv-Orya", __AM), ("kxv-Telu", __AM), ("ky", __AM), ("lb", __AM), ("lij", __AM), ("lmo", __AM), ("lo", __AM), ("lt", __AM), ("lv", __LV), ("mai", __AM), ("mi", __AM), ("mk", __MK), ("ml", __AM), ("mn", __AM), ("mni", __AM), ("mr", __AM), ("ms", __AM), ("mt", __AM), ("my", __AM), ("nds", __AM), ("ne", __AM), ("nl", __AM), ("no", __AF), ("nqo", __AM), ("oc", __AM), ("or", __FA), ("pa", __AM), ("pcm", __AF), ("pl", __AM), ("prg", __AM), ("ps", __AM), ("pt", __AM), ("qu", __AM), ("raj", __AM), ("rm", __AM), ("ro", __RO), ("ru", __AM), ("sa", __AM), ("sah", __AM), ("sat", __AM), ("sc", __AM), ("sd", __FA), ("sd-Deva", __AM), ("si", __AF), ("sk", __AM), ("sl", __SL), ("so", __AM), ("sq", __AM), ("sr", __AM), ("sr-Latn", __AM), ("su", __AM), ("sv", __AF), ("sw", __AM), ("syr", __AM), ("szl", __AM), ("ta", __AM), ("te", __AM), ("tg", __AM), ("th", __AM), ("ti", __AM), ("tk", __AM), ("to", __AM), ("tr", __AM), ("tt", __AM), ("ug", __AM), ("uk", __AM), ("und", __AM), ("ur", __AF), ("uz", __AM), ("uz-Cyrl", __AM), ("vec", __AM), ("vi", __AM), ("vmw", __AM), ("wo", __AM), ("xh", __AM), ("xnr", __AM), ("yo", __AM), ("yrl", __AM), ("yue", __AM), ("yue-Hans", __AM), ("za", __AM), ("zh", __AM), ("zh-Hant", __AM), ("zu", __AM)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::plurals::provider::PluralRangesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::plurals::provider::PluralRangesV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PLURAL_RANGES_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::plurals::provider::PluralRangesV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PLURAL_RANGES_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::plurals::provider::PluralRangesV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
        impl icu_provider::CanLoad<icu::plurals::provider::PluralRangesV1Marker> for $provider {
            fn can_load(&self, req: icu_provider::DataRequest) -> Result<bool, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::contains(&Self::DATA_PLURAL_RANGES_V1_MARKER, req.id))
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_plural_ranges_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::plurals::provider::PluralRangesV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_PLURAL_RANGES_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_plural_ranges_v1_marker as impl_plural_ranges_v1_marker;
