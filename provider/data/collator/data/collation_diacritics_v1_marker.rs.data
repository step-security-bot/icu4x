// @generated
/// Implement `DataProvider<CollationDiacriticsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_diacritics_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COLLATION_DIACRITICS_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale, icu::collator::provider::CollationDiacriticsV1Marker> = {
                type S = <icu::collator::provider::CollationDiacriticsV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const __AF: &S = &icu::collator::provider::CollationDiacriticsV1 { secondaries: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x8A\0\x88\0\x8E\0\x9A\0\xA4\0\xB4\0\x8C\0\x9C\0\x96\0\xB6\0\x92\0\x98\0\x90\0\xA6\0\xA6\0\xB8\0\xBA\0\xBC\0\xA6\0\x84\0\x86\0\xA6\0\xA8\0\xA8\0\xA8\0\xA8\0\xA6\0\xBE\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xC0\0\xC2\0\xC4\0\xC6\0\xC8\0\xCA\0\xA0\0\xA2\0\xA8\0\xA8\0\xA8\0\xA8\0\xCC\0\xCE\0\xA8\0\xD0\0\xD2\0\x82\0\xA8\0\xD4\0\xB2\0\xAA\0\xAA\0\x9E\0\xD6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\0\0\0\0\x94\0\0\0\0\0\xD8\0\xA6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\xA8\0\xA8") } };
                const __VI: &S = &icu::collator::provider::CollationDiacriticsV1 { secondaries: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x8A\x04\x8B\0\x8E\x03\x8B\0\xA4\0\xB4\0\x8C\0\x9C\0\x96\x02\x8B\0\x92\0\x98\0\x90\0\xA6\0\xA6\0\xB8\0\xBA\0\xBC\0\xA6\0\x84\0\x86\0\xA6\0\xA8\0\xA8\0\xA8\0\xA8\0\xA6\0\xBE\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xC0\0\xC2\x05\x8B\0\xC6\0\xC8\0\xCA\0\xA0\0\xA2\0\xA8\0\xA8\0\xA8\0\xA8\0\xCC\0\xCE\0\xA8\0\xD0\0\xD2\0\x82\0\xA8\0\xD4\0\xB2\0\xAA\0\xAA\0\x9E\0\xD6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\0\0\0\0\x94\0\0\0\0\0\xD8\0\xA6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\xA8\0\xA8") } };
                icu_provider_baked::binary_search::Data(&[("af", __AF), ("am", __AF), ("ar", __AF), ("as", __AF), ("ast", __AF), ("az", __AF), ("be", __AF), ("bg", __AF), ("bgc", __AF), ("bho", __AF), ("blo", __AF), ("bn", __AF), ("br", __AF), ("brx", __AF), ("bs", __AF), ("ca", __AF), ("ceb", __AF), ("chr", __AF), ("cs", __AF), ("csw", __AF), ("cv", __AF), ("cy", __AF), ("da", __AF), ("de", __AF), ("doi", __AF), ("dsb", __AF), ("el", __AF), ("en", __AF), ("eo", __AF), ("es", __AF), ("et", __AF), ("eu", __AF), ("fa", __AF), ("ff-Adlm", __AF), ("fi", __AF), ("fil", __AF), ("fo", __AF), ("fr", __AF), ("fy", __AF), ("ga", __AF), ("gd", __AF), ("gl", __AF), ("gu", __AF), ("ha", __AF), ("he", __AF), ("hi", __AF), ("hr", __AF), ("hsb", __AF), ("hu", __AF), ("hy", __AF), ("ia", __AF), ("id", __AF), ("ie", __AF), ("ig", __AF), ("is", __AF), ("it", __AF), ("ja", __AF), ("jv", __AF), ("ka", __AF), ("kea", __AF), ("kgp", __AF), ("kk", __AF), ("km", __AF), ("kn", __AF), ("ko", __AF), ("kok", __AF), ("ks", __AF), ("ks-Deva", __AF), ("ku", __AF), ("kxv", __AF), ("kxv-Deva", __AF), ("kxv-Orya", __AF), ("kxv-Telu", __AF), ("ky", __AF), ("lb", __AF), ("lij", __AF), ("lmo", __AF), ("lo", __AF), ("lt", __AF), ("lv", __AF), ("mai", __AF), ("mi", __AF), ("mk", __AF), ("ml", __AF), ("mn", __AF), ("mni", __AF), ("mr", __AF), ("ms", __AF), ("mt", __AF), ("my", __AF), ("nds", __AF), ("ne", __AF), ("nl", __AF), ("no", __AF), ("nqo", __AF), ("oc", __AF), ("or", __AF), ("pa", __AF), ("pcm", __AF), ("pl", __AF), ("prg", __AF), ("ps", __AF), ("pt", __AF), ("qu", __AF), ("raj", __AF), ("rm", __AF), ("ro", __AF), ("ru", __AF), ("sa", __AF), ("sah", __AF), ("sat", __AF), ("sc", __AF), ("sd", __AF), ("sd-Deva", __AF), ("si", __AF), ("sk", __AF), ("sl", __AF), ("so", __AF), ("sq", __AF), ("sr", __AF), ("su", __AF), ("sv", __AF), ("sw", __AF), ("syr", __AF), ("szl", __AF), ("ta", __AF), ("te", __AF), ("tg", __AF), ("th", __AF), ("ti", __AF), ("tk", __AF), ("to", __AF), ("tr", __AF), ("tt", __AF), ("ug", __AF), ("uk", __AF), ("und", __AF), ("ur", __AF), ("uz", __AF), ("vec", __AF), ("vi", __VI), ("vmw", __AF), ("wo", __AF), ("xh", __AF), ("xnr", __AF), ("yo", __AF), ("yrl", __AF), ("yue-Hans", __AF), ("za", __AF), ("zh", __AF), ("zu", __AF)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationDiacriticsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationDiacriticsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationDiacriticsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::collator::provider::CollationDiacriticsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
        impl icu_provider::CanLoad<icu::collator::provider::CollationDiacriticsV1Marker> for $provider {
            fn can_load(&self, req: icu_provider::DataRequest) -> Result<bool, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::contains(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER, req.id))
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_diacritics_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::collator::provider::CollationDiacriticsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_collation_diacritics_v1_marker as impl_collation_diacritics_v1_marker;
